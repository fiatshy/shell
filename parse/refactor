/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse_test.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: sunghyki <sunghyki@student.42gyeongsa      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/07 09:22:14 by sunghyki          #+#    #+#             */
/*   Updated: 2024/05/07 09:22:21 by sunghyki         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft/libft.h"
#include "parse_test.h"

void	handle_interrupt(int fill);
void	handle_interrupt_blocked(int fill);
void	fork_and_exectue_nested(t_cmd_struct *tcst, int index);
char	*get_env(void);
char	*get_envv(t_cmd_struct *tcst);
void	get_execute_path_nested(int *response, \
		char *s, char **cmd_path, t_cmd_struct *tcst);
char	*get_exectue_path(char *s, t_cmd_struct *tcst);
void	set_tunnels(t_cmd_struct *tcst, int index);
char	*what_quotes(char *s);
void	trim(t_cmd_struct *tcst, int index, int i);
void	ft_echo(t_cmd_struct *tcst, int index);
void	ft_exit(void);
void	ft_status(t_cmd_struct *tcst);
void	ft_pwd(t_cmd_struct *tcst);
int		find_slash_reverse(char *s, int target);
char	*extract_command(t_cmd_struct *tcst, int index);
void	delete_redundant_path(char temp[255], int start);
void	copy_path(char temp[255], char *src);
char	*relative_path_exec_nested(t_cmd_struct *tcst, int index, char cwd[255]);
char	*get_relative_path(t_cmd_struct *tcst, int index);
char	*get_relative_path_exec(t_cmd_struct *tcst, int index);
int		has_relative_path(char *s);
int		has_multi_dots(char *s);
void	ft_cd(t_cmd_struct *tcst, int index);
int		ft_env(t_cmd_struct *tcst);
void	ft_export(t_cmd_struct *tcst, int index);
void	ft_unset(t_cmd_struct *tcst, int index);
void	get_file_length(int *i);
void	write_env(char **arr, t_cmd_struct *tcst, int index);
int		is_builtin(t_cmd_struct *tcst, int index);
int		exec_builtin(t_cmd_struct *tcst, int index);
int		handle_res_nested(int *res, t_cmd_struct *tcst, int index);
int		handle_res(int *res, t_cmd_struct *tcst, int index);
void	handle_parent(int res, t_cmd_struct *tcst, int index);
void	fork_nested(int res, t_cmd_struct *tcst, int index);
int		fork_and_execute(t_cmd_struct *tcst, int index);
void	free_after_exectue(t_cmd_struct *tcst, int i, int *proceed);
int		check_grouping_or(t_cmd_struct *tcst, int *i, int *proceed);
int		check_grouping_and(t_cmd_struct *tcst, int *i, int *proceed);
int		check_grouping(t_cmd_struct *tcst, int *i, int *proceed);
void	set_redirect_args(t_cmd_struct *tcst, int *index, int k);
void	handle_redirect_delim_nested(t_cmd_struct *tcst, int k);
void	handle_redirect_delim(t_cmd_struct *tcst, int k);
void	handle_redirect_output(t_cmd_struct *tcst, int k);
void	handle_again(t_cmd_struct *tcst, int k, int *index);
void	free_again(t_cmd_struct *tcst, int k);
int		free_redirect_all(t_cmd_struct *tcst);
void	init_dup2(t_cmd_struct *tcst);
void	close_fds(t_cmd_struct *tcst);
char	*make_bin(t_cmd_struct *tcst);
void	set_tunnel_redirect(t_cmd_struct *tcst, int index);
void	redirect_parents(t_cmd_struct *tcst, int index);
void	execute_redirection(t_cmd_struct *tcst, int first, int index);
void	free_redirection(t_cmd_struct *tcst, int j);
int		get_args_length(char **s);

typedef struct s_var
{
	int	k;
	int	length;
}				t_var;

int		handle_redirection_nested(t_cmd_struct *tcst, int j);
int		check_wrong_redirection(char *s);
int		handle_redirection(t_cmd_struct *tcst, int i);
int		prepare_execute_nested(t_cmd_struct *tcst, int i, int proceed, int cont);
int		prepare_execute(t_cmd_struct *tcst);
int		free_all(t_cmd_struct *tcst);
int		has_only_spaces(char *s);
int		is_empty_command(char s);
int		check_if_ctrl_d(char *s);
int		main(void);